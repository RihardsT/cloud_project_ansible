# Seems like this didn't help anyway with the kubectl logs too many open files issue
# sudo sysctl -w fs.nr_open=1048576 # The value it had
# sudo sysctl -w fs.nr_open=91048576
- sysctl:
    name: fs.inotify.max_user_instances
    value: '256'
    sysctl_set: yes
    sysctl_file: /etc/sysctl.d/98-inotify.conf
    reload: yes

##### This containerd limit seemed to help, after reboot, but service restart should suffice. Nop doesn't seem to help
# sudo sed -i 's/LimitNOFILE=infinity/LimitNOFILE=665535/' /usr/lib/systemd/system/containerd.service

# Get
# sudo sysctl fs.inotify.max_user_watches # 186764
# sudo sysctl fs.inotify.max_user_instances # 128
# sudo sysctl fs.inotify.max_queued_events # 16384
# This seemed to work
# sudo sysctl -w fs.inotify.max_user_instances=256 # was 128
# Keep this in case it's needed
# sudo sysctl -w fs.inotify.max_user_watches=99999999
# sudo sysctl -w fs.inotify.max_queued_events=99999999

- name: Create a .kube directory
  file:
    path: "/home/{{ item }}/.kube"
    state: directory
    owner: "{{ item }}"
  with_items: "{{ app_user }}"
- name: Symlink the kubectl admin.conf to ~/.kube/conf.
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ item }}/.kube/config"
    remote_src: yes
    mode: 0600
    owner: "{{ item }}"
  with_items: "{{ app_user }}"
- name: Copy kubeconfig to local
  ansible.builtin.fetch:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/config
    flat: yes
# Replace this below with K8s task? Don't want to install a module currently
- name: Set up K8s services (Longhorn, Traefik)
  become_user: rihards
  delegate_to: localhost
  ansible.builtin.command: "kubectl apply -f {{ item }}"
  loop:
    - https://raw.githubusercontent.com/traefik/traefik/v2.10/docs/content/reference/dynamic-configuration/kubernetes-crd-rbac.yml
    - https://raw.githubusercontent.com/traefik/traefik/v2.10/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml
    - ~/Code/cloud_project/cloud_project_kubernetes/Base/Traefik_v2/
    - https://raw.githubusercontent.com/longhorn/longhorn/v1.9.1/deploy/longhorn.yaml
    - ~/Code/cloud_project/cloud_project_kubernetes/CI_CD_IaC_Tools/ArgoCD/namespace.yaml
    - https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml -n argocd
    - ~/Code/cloud_project/cloud_project_kubernetes/CI_CD_IaC_Tools/ArgoCD/argo_config.yaml
